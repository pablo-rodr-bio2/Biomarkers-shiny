library(shiny); runApp('covid-test.R')
value <- loadData("studies")
loadData <- function(table) {
# Connect to the database
db <- dbConnect(MySQL(), dbname = databaseName, host = options()$mysql$host,
port = options()$mysql$port, user = options()$mysql$user,
password = options()$mysql$password)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", table)
data <- dbGetQuery(db, query)
dbDisconnect(db)
data
}
options(mysql = list(
"host" = "david.prib.upf.edu",
"port" = 3306,
"user" = "psebastian"
# , "password" = "mypassword"
))
databaseName <- "biomarkers_2022"
value <- loadData("studies")
value
View(value)
class(value)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
value
value <- loadData("gene-disease")
library(RMySQL)
value <- loadData("gene-disease")
value <- loadData("gene_disease")
v <- value %>% select(-geneid, -diseaseid)
View(v)
v <- value %>% select(-geneid, -diseaseid, -id, -sentenceHtml)
library(shiny); runApp('covid-test.R')
install.packages("bench")
library(shiny)
library(RMariaDB)
library(DT)
library(shinycssloaders)
library(dplyr)
con <- function() {
DBI::dbConnect(
MariaDB(),
host = "david.prib.upf.edu",
user = "psebastian",
dbname = "biomarkers_2022",
port = 3306)
}
gene_disease_loadData <- function(){
con <- con()
# Construct the fetching query
query <- "select gd.*, g.symbol, d.name from gene_disease as gd left join genes as g on gd.geneid = g.geneid left join diseases as d on gd.diseaseid = d.diseaseid"
data <- dbGetQuery(con, query)
data <- as.data.frame(data)
dbDisconnect(con)
return(data)
}
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(db_con, from = "gene_disease")
data <- remote_gd %>%
left_join(remotes_genes, by = "geneid") %>%
left_join(remotes_diseases, by = "diseaseid")
as.data.frame
}
d <- gene_disease_loadData()
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remotes_genes, by = "geneid") %>%
left_join(remotes_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
con <- con()
remote_genes <- tbl(con, "genes")
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_disease <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
con <- function() {
DBI::dbConnect(
MariaDB(),
host = "david.prib.upf.edu",
user = "psebastian",
dbname = "biomarkers_2022",
port = 3306)
}
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid")
as.data.frame
}
d2 <- gene2()
d2
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid") %>%
as.data.frame
}
d2 <- gene2()
gene2 <- function(){
con <- con()
remote_genes <- tbl(con, "genes")
remote_diseases <- tbl(con, "diseases")
remote_gd <- tbl(con, from = "gene_disease")
data <- remote_gd %>%
left_join(remote_genes, by = "geneid") %>%
left_join(remote_diseases, by = "diseaseid") %>%
as.data.frame
dbDisconnect(con)
return(data)
}
d2 <- gene2()
d
d2
colnames(d)
colnames(d2)
library(bench)
mark(
gene_disease_loadData(),
gene2(),
check = F
)
gene_disease_loadData <- function(){
con <- con()
# Construct the fetching query
query <- "select gd.*, g.symbol, d.name
from gene_disease as gd
left join genes as g
on gd.geneid = g.geneid
left join diseases as d
on gd.diseaseid = d.diseaseid"
data <- dbGetQuery(con, query)
data <- as.data.frame(data)
dbDisconnect(con)
return(data)
}
d <- gene_disease_loadData()
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
runApp('covid-test.R')
library(shiny); runApp('biomarkers-shiny.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
# sprintf('<button type="button">%s</button>', text)
htmltools::doRenderTags(actionButton(inputId = "btn", label = "text"))
# sprintf('<button type="button">%s</button>', text)
x <- htmltools::doRenderTags(actionButton(inputId = "btn", label = "text"))
str(x)
length(x)
is.vector(x)
as.vector(x)
runApp()
runApp()
# sprintf('<button type="button">%s</button>', text)
as.vector(htmltools::doRenderTags(actionButton(inputId = "btn", label = text)))
# sprintf('<button type="button">%s</button>', text)
as.vector(htmltools::doRenderTags(actionButton(inputId = "btn", label = "text")))
# sprintf('<button type="button">%s</button>', text)
htmltools::renderTags(actionButton(inputId = "btn", label = "text"))
runApp()
# sprintf('<button type="button">%s</button>', text)
htmltools::renderTags(actionButton(inputId = "btn", label = text))$html
# sprintf('<button type="button">%s</button>', text)
htmltools::renderTags(actionButton(inputId = "btn", label = "text"))$html
runApp()
runApp()
runApp()
paste0('<button type="button" style="width: 100%; display:block;" class="btn btn-default action-button">', text, '%s</button>')
text <- "algo"
paste0('<button type="button" style="width: 100%; display:block;" class="btn btn-default action-button">', text, '%s</button>')
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("pool")
runApp()
runApp()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
pool %>%
tbl("genes")
pool %>%
tbl("genes") %>%
mutate(symbol = createLink_Button(symbol))
createLink_Button <- function(text){
paste0('<button type="button" style="width: 100%; display:block;"
class="btn btn-success action-button">', text, '</button>')
}
pool %>%
tbl("genes") %>%
mutate(symbol = createLink_Button(symbol))
pool %>%
tbl("genes") %>%
collect() %>%
mutate(symbol = createLink_Button(symbol))
poolClose(pool)
runApp()
runApp()
dt_genes
genes
m <- matrix(c(1,1))
m
m <- matrix(c(1,1), nrow = 1)
m
str(m)
as.vector(value)
as.vector(m)
runApp()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
pool %>%
tbl("gene_disease_summary")
pool %>%
tbl("gene_disease_summary") %>%
filter(symbol == "A1BG")
pool %>%
tbl("gene_disease_summary") %>%
filter(symbol == "A1BG") %>% collect()
runApp()
m <- matrix(as.integer(c(1,1)), nrow = 1)
m
str(m)
dt_genes <- pool %>%
tbl("genes") %>%
collect()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
dt_genes <- pool %>%
tbl("genes") %>%
collect()
dt_genes
dt_genes[value]
dt_genes[m]
dt_genes[as.vector(m)]
as.vector(m)
pull(dt_genes)
dt_genes[m, drop =TRUE]
cbind(m)
m
dt_genes[m, drop =FALSE]
dt_genes[m, exact = TRUE]
dt_genes[as.vector(m), exact = TRUE]
m[1]
m[2]
m[1,]
m[,1]
m[,2]
runApp()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
runApp()
runApp()
library(bench)
dt_genes
dt_gds
mark(as.data.frame(dt_genes))
runApp()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
genes <- pool %>% tbl("genes")
diseases <- pool %>% tbl("diseases")
gd <- pool %>% tbl("gene_diseases")
gd <- pool %>% tbl("gene_disease")
gd %>%
left_join(genes, by = "geneid") %>%
left_join(diseases, by = "diseaseid") %>%
select(colnames(gd), symbol, name) %>%
dt$dt_gd <- gd %>%
left_join(genes, by = "geneid") %>%
left_join(diseases, by = "diseaseid") %>%
select(colnames(gd), symbol, name) %>%
collect()
gd %>%
left_join(genes, by = "geneid")
gd %>%
left_join(genes, by = "geneid") %>%
left_join(diseases, by = "diseaseid")
gd %>%
left_join(genes, by = "geneid") %>%
left_join(diseases, by = "diseaseid") %>%
select(colnames(gd), symbol, name)
dt_gd <- pool %>% dbGetQuery(query) %>% collect()
query <- "select gd.*, g.symbol, d.name
from gene_disease as gd
left join genes as g
on gd.geneid = g.geneid
left join diseases as d
on gd.diseaseid = d.diseaseid"
pool %>% dbGetQuery(query) %>% collect()
runApp()
runApp()
runApp()
pool <- dbPool(
drv = MariaDB(),
host = "david.prib.upf.edu",
username = "psebastian",
dbname = "biomarkers_2022",
port = 3306
)
query <- "select gd.*, g.symbol, d.name
from gene_disease as gd
left join genes as g
on gd.geneid = g.geneid
left join diseases as d
on gd.diseaseid = d.diseaseid"
dt_gd <- pool %>% dbGetQuery(query) %>% collect()
dt_gd
library(pool)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# liver <-fread("data/liver_biomarkers.tsv")
pool <- dbPool(
drv = MariaDB(),
host = "localhost",
username = "psebastian",
password = "",
dbname = "biomarkers_2022",
port = 3306
)
query <- "select gd.*, g.symbol, d.name, s.year
library(pool)
library(RMariaDB)
library(dplyr)
library(tidyr)
library(dplyr)
library(kableExtra)
# liver <-fread("data/liver_biomarkers.tsv")
# liver <-fread("data/liver_biomarkers.tsv")
pool <- dbPool(
drv = MariaDB(),
host = "localhost",
username = "psebastian",
password = "",
dbname = "biomarkers_2022",
port = 3306
)
library(pool)
# liver <-fread("data/liver_biomarkers.tsv")
pool <- dbPool(
drv = MariaDB(),
host = "localhost",
username = "psebastian",
password = "",
dbname = "biomarkers_2022",
port = 3306
)
library(RMariaDB)
# liver <-fread("data/liver_biomarkers.tsv")
pool <- dbPool(
drv = MariaDB(),
host = "localhost",
username = "psebastian",
password = "",
dbname = "biomarkers_2022",
port = 3306
)
query <- "select gd.*, g.symbol, d.name, s.year
from gene_disease as gd
left join genes as g
on gd.geneid = g.geneid
left join diseases as d
on gd.diseaseid = d.diseaseid
left join studies as s
on gd.nctid = s.nctid
limit 100"
liver <- pool %>%
dbGetQuery(query) %>%
collect()
library(dplyr)
library(tidyr)
liver <- pool %>%
dbGetQuery(query) %>%
collect()
liver
colnames(liver)
liver[1,]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
